{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _jsxFileName = \"/home/osboxes/sandbox/udemy/react/rn-starter/src/screens/SquareScreen.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useReducer, useState } from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport ColorCounter from \"../Components/ColorCounter\";\nvar COLOR_INCREMENT = 10;\n\nvar reducer = function reducer(state, action) {\n  switch (action.colorToChange) {\n    case 'red':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        red: state.red + action.amount\n      });\n\n    case 'green':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        green: state.green + action.amount\n      });\n\n    case 'blue':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        blue: state.blue + action.amount\n      });\n\n    default:\n      return state;\n  }\n\n  ;\n};\n\nvar SquareScreen = function SquareScreen() {\n  var _useReducer = useReducer(reducer, {\n    red: 0,\n    green: 0,\n    blue: 0\n  }),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      state = _useReducer2[0],\n      dispatch = _useReducer2[1];\n\n  var red = state.red,\n      green = state.green,\n      blue = state.blue;\n  return React.createElement(View, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }\n  }, React.createElement(ColorCounter, {\n    onIncrease: function onIncrease() {\n      return dispatch({\n        colorToChange: 'red',\n        amount: COLOR_INCREMENT\n      });\n    },\n    onDecrease: function onDecrease() {\n      return dispatch({\n        colorToChange: 'red',\n        amount: -1 * COLOR_INCREMENT\n      });\n    },\n    color: \"Red\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }\n  }), React.createElement(ColorCounter, {\n    onIncrease: function onIncrease() {\n      return dispatch({\n        colorToChange: 'green',\n        amount: COLOR_INCREMENT\n      });\n    },\n    onDecrease: function onDecrease() {\n      return dispatch({\n        colorToChange: 'green',\n        amount: -1 * COLOR_INCREMENT\n      });\n    },\n    color: \"Green\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 12\n    }\n  }), React.createElement(ColorCounter, {\n    onIncrease: function onIncrease() {\n      return dispatch({\n        colorToChange: 'blue',\n        amount: COLOR_INCREMENT\n      });\n    },\n    onDecrease: function onDecrease() {\n      return dispatch({\n        colorToChange: 'blue',\n        amount: -1 * COLOR_INCREMENT\n      });\n    },\n    color: \"Blue\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 12\n    }\n  }), React.createElement(View, {\n    style: {\n      height: 150,\n      width: 150,\n      backgroundColor: \"rgb(\" + red + \", \" + green + \", \" + blue + \")\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }\n  }));\n};\n\nvar styles = StyleSheet.create({});\nexport default SquareScreen;","map":{"version":3,"sources":["/home/osboxes/sandbox/udemy/react/rn-starter/src/screens/SquareScreen.js"],"names":["React","useReducer","useState","ColorCounter","COLOR_INCREMENT","reducer","state","action","colorToChange","red","amount","green","blue","SquareScreen","dispatch","height","width","backgroundColor","styles","StyleSheet","create"],"mappings":"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","sourcesContent":["import React, {useReducer, useState} from \"react\"; // usestate is a hook to follow the state of the variable\nimport { Text, StyleSheet, View, Button } from \"react-native\";\nimport ColorCounter from '../Components/ColorCounter';\n\nconst COLOR_INCREMENT = 10;\n\n// place the reducer above the main function\nconst reducer =(state, action) => {\n    // state === { red: number, green:number, bue: number};\n    // action === { colorToChange: 'red' || 'green' || 'blue', amount 15 || -15};\n\n    switch (action.colorToChange) { // does not change the state object. Returns a copy with the modified data\n        case 'red':\n            return { ...state, red: state.red + action.amount };\n        case 'green':\n            return { ...state, green: state.green + action.amount };\n        case 'blue':\n            return { ...state, blue: state.blue + action.amount };\n        default:\n            return state;\n    };\n};\n\nconst SquareScreen = () => { \n    const [state, dispatch] = useReducer(reducer,{red:0, green:0, blue:0}); // intitialize the reducer with the starting values\n    const { red, green, blue } = state;\n\n    return (\n        <View>\n            <ColorCounter\n               onIncrease={ () => dispatch({ colorToChange: 'red', amount: COLOR_INCREMENT })}\n               onDecrease={ () => dispatch({ colorToChange: 'red', amount: -1 * COLOR_INCREMENT })}\n               color=\"Red\"\n           />\n           <ColorCounter\n               onIncrease={() => dispatch({ colorToChange: 'green', amount: COLOR_INCREMENT })}\n               onDecrease={() => dispatch({ colorToChange: 'green', amount: -1 * COLOR_INCREMENT })}\n               color=\"Green\"\n           />\n           <ColorCounter\n               onIncrease={() => dispatch({ colorToChange: 'blue', amount: COLOR_INCREMENT })}\n               onDecrease={() => dispatch({ colorToChange: 'blue', amount: -1 * COLOR_INCREMENT })}\n               color=\"Blue\"\n           />\n            <View\n                style={{ height: 150, width: 150, backgroundColor: `rgb(${red}, ${green}, ${blue})` }}\n            />\n        </View>\n    );\n      \n};\n\nconst styles = StyleSheet.create({});\n\nexport default SquareScreen;\n"]},"metadata":{},"sourceType":"module"}